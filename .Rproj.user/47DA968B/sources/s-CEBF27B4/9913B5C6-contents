---
title: "cap.3 - R Objects"
author: "Washington Candeia de Araujo"
date: "April 26, 2018"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Iniciando no Projeto 2: Playing Cards
Neste capítulo o R será usado para construir um baralho de 52 cartas. 

## Atomic Vectors
É o tipo mais simples de objeto em R. A maioria das estruturas em R são construídas a partir deste tipo de objeto.  
Um **vetor atômico** é um simples vetor contendo dados.  

Vetores armazenam dados de forma unidimensional, e cada vetor armazena um tipo  de dado.  

> Tipos de dados básicos de vetores atômicos:   
- _doubles_  
- _integers_  
- _characters_  
- _logical_  
- _complex_  
- _raw_  

Para fazer isso é  preciso ficar atento às características de cada tipo destes seis tipos de dados. 

```{r}
# Nosso dado é um vetor simples
die <- c(1, 2, 3, 4, 5, 6)
is.vector(die)

# Um único valor também é um vetor 
five <- 5
is.vector(five)
```

R reconhecerá cada uma das convenções específicas para criação de cada tipo de dados. Por exemplo, se quisermos criar um vetor contendo **_integers_** ou **_characters_** precisamos especificar cada um destes tipos de dados:   

```{r}
# Criando um vetor de inteiros
int <- c(1L, 5L)

# Criando um vetor de caracteres
text <- c("espadas", "copas")

print(int)
print(text)
```

Agora, iremos observar cada um dos tipos de dados para vetores atômicos.   

## Doubles

Vetores com este tipo de dado armazena números comuns. Os números podem ser positivos ou negativos, pequenos ou grandes, podendo ter dígitos decimais. No geral, R salva qualquer número que digitamos como um _double_.  

É possível descobrir que tipo estamos usando através da função `typeof`. 

```{r}
typeof(die)
```

Algumas funções de R se referem a _double_ como **_numerics_**. 

> _Double_ é um termo usado em Ciência da Computação para se referir ao número específico de _bytes_ que o computador usa para armazenar um número.  


## Integers

Vetores com este tipo de dado armazenam números que podem ser escritos sem um componente decimal. O próprio autor deste livro recomenda não usar este tipo, pois é possível usar _double_ para armazenar como um inteiro. 

```{r}
# Especificando inteiros em um vetor
int2 <- c(-1L, -60L, 88L, 5L, 6L)

print(int2)
```


R não salvará um número como um inteiro (_integer_) a não ser que especifiquemos. 

> A diferença entre um _double_ e um _integer_ é como R salvará cada um deles na memória do computador.
Inteiros são definidos mais precisamente na memória do computador do que _doubles_.  

# Characters 

Caracteres são bem fáceis de identificar. Eles precisam estar sob aspas e seu tipo é igualmente fácil de identificar.  

```{r}
# Characters
text <- c("Hello", "World")

print(text)
typeof(text)
```

# Logical

Lógicos estão conforme a lógica matemática, onde os **_booleanos_** são utilizados para estas manipulações.   

> **and** - será TRUE se ambos forem TRUE  
> **or** - será FALSE se ambos forem FALSE  



Logical **AND**|**Resultado**|  
---------------|-------------|    
FALSE AND FALSE|FALSE        |   
FALSE AND TRUE |FALSE        |  
TRUE AND FALSE |FALSE        |   
TRUE AND TRUE  |TRUE         |  


Logical **OR** |**Resultado**|  
---------------|-------------|    
FALSE OR FALSE |FALSE        |   
FALSE OR TRUE  |TRUE         |  
TRUE OR FALSE  |TRUE         |   
TRUE OR TRUE   |TRUE         |  

## Atributes

Um **atributo** é um pedaço de informação que você pode anexar a um **_atomic vector_** ou qualquer objeto R.  
Um atributo seria semelhante aos metadados uma vez que não será visível nem aparecerá no resultado do código. Então, por que utilizar?  

Na verdade, alguma funções R podem utilizar os atributos específicos, por isso sua importância. Dependendo do tipo de análise e dados que quisermos armazenar, isso terá sua importância.

É possível observar se um objeto R possui atributos relacionados. Para isso utiliza-se o mesmo tipo de função usada anteriormente:  

```{r}
dados <- c(1, 2, 3, 4, 5, 6)
print(dados)
attributes(dados)
```

Como o resultado é `NULL` sabemos que não há nenhum tipo de atributo relacionado ao objeto **dados**.  


Agora, iremos observar que tipos de atributos podemos relacionar a um objeto R.  

Os principais atributosd de um vetor atômico são:  
> Names, Dimensions (dim), Classes  

### Names 

Este é um atributo que pode ser passado a vetores atômicos. Para passar os nomes como atributos, basta passar o objeto R como um argumento à função `names`. Para observar se está tudo O.K. utilize a função `attributes`. 

```{r}
# Vamos atribuir a objetos R, nomes
# Esse é o atributo name em R
dados <- c(1, 2, 3, 4, 5, 6)
names(dados) <- c('um', 'dois', 'tres', 'quatro', 'cinco', 'seis')

# Observando os atributos
attributes(dados)
print(dados)

# Somar
dados + 1

# Para encerrar atributos basta atribuir NULL a este objeto R
names(dados) <- NULL
attributes(dados)

# Exemplo
eu <- c('Biologo', '34', 'Bioquímica', 'UFRN')
names(eu) <- c('Profissão', 'Idade', 'Área', 'Instituição')
print(eu)
```


### Dim  

É possível transformar um vetor atômico em um **_array_** _n_-dimensional atribuindo-lhe (**_attribute_**!) dimensões com a função `dim`. Essa função cria o atributo específico para dimensões em objetos R.  

O interessante é que sepode fornecer mais de duas dimensões (neste caso, **linha**, **coluna** e **_slices_**).  
Vamos observar alguns exemplos.  

```{r}
dim(die) <- c(2, 3)  # Duas linhas, Três colunas
print(die)

dim(die) <- c(3, 2)
print(die)

# Criando um dado de três dimensões
# Seria um hypercube, e R mostrará cada um dos slices
dim(die) <- c(1, 2, 3)
print(die)
```

## Matrices

**Matrizes** e R são estruturas de dados que armazenam 

Matrizes armazenam valores em um arranjo **bidimensional**. 

É possível utilizar um vetor atômico para construção de uma matriz. Para isso, define-se o número de linhas. No mesmo sentido, é possível observar que a distribuição dos dados na matriz se dá por coluna. Assim, se temos um dado de seis faces e definimos nossa matriz com 2 linhas, a primeira coluna receberá na linha 1 o número 1, na linha dois o número dois. Na segundo coluna encontraremos na linha 1 o número 3 e na linha 2 o número 4, e assim sucessivamente.   

Para modificar este arranjo, basta utilizar a função `matrix` adicionando como argumento do parâmetro `byrow` o valor `TRUE'. Isso garantirá que a distribuição dos dados na matriz será iniciada na linha.   

```{r}
m <- matrix(die, nrow = 2); print(m)
m2 <- matrix(die, nrow = 3); print(m2)
# Matriz com argumento TRUE para parametro byrow
m3 <- matrix(die, nrow = 2, byrow = TRUE); print(m3)
m4 <- matrix(die, nrow = 3, byrow = TRUE); print(m4)

```

## Arrays

**_Arrays_** (arranjos) em R são semelhantes às matrizes, porém, eles guardam arranjos **_n-dimensionais_** de dados.  
Desta forma, um array pode conter mais de duas dimensões. 
Para criar um array é preciso indicar um vetor atômico para entrada de dados. A sua funcionalidade é basicamente a mesma do atributo `dim` que foi visto anteriormente. 

Para criar um _array_ é preciso fornecer um vetor atômico como primeiro argumento, e um vetor de dimensões como segundo argumento. Este último é agora chamado de `dim`.  

```{r}
# Criando um array
# ar será um array 2 x 2 x 3 (duas linhas, duas colunas, em três slices)
ar <- array(c(11:14, 21:24, 31:34), dim = c(2, 2, 3)); print(ar)
```

## Factors

```{r}
  # Factors
gender <- factor(c('feminino', 'masculino', 'feminino', 'feminino', 'feminino', 'feminino'))
typeof(gender)
class(gender)
attributes(gender)
# Como R armazena o factor
unclass(gender)

```

R mostrará o primeiro nível como sendo 1 (feminino) e o segundo nível será 2 (masculino).  


Como é visto em `dico`, abaixo, há mais de dois fatores, por isso os níveis irão aumentar também.  

```{r}
# Quando se tem factors envolvidos na tabela, matriz, data.frame
# observar como estes estão armazenados (1 ou 2 ?) usando unclass
dico <- factor(c('pétalas', 'sépalas', 'tronco', 'frutos', 'inflorescencia'))
attributes(dico)
class(dico)
unclass(dico)
```

**Fatores** tornam uma tarefa fácil colocar variáveis categóricas em modelos estatísticos devido às variáveis serem codificadas como números. Porém, a complicação de fatores é que estes confundem por se assemelharem a caracteres (_strings_), mas se comportarem como inteiros.  

**R tentará converter _strings_ de caracteres a fatores quando os dados forem abertos ou criados no ambiente do interpretador. No geral, a experiência será melhor se não se permitir ao R fazer fatores até que se peça ao mesmo que seja feito. 

Assim como outros tipos em R, pode-se transformar fatores em _strings_ de caracteres com a função `as.character`.  
```{r}
char <- as.character(dico)
typeof(char)
class(char)
attributes(char)
unclass(char)
```
**Exercício, p.51**  

```{r}
## Exercício, p.51
# Faça uma jogada de cartas virtuais por combinar
# 'as', 'kopas' e 1 em um vetor
# Que tipo de vetor atômico surgirá?  
cards <- c('as', 'kopas', 1)
typeof(cards); attributes(cards); class(cards); unclass(cards)

# Uma vez que o interpretador R não suporta vetores atômicos com mais de um tipo de dado
# R, por coerção, transformará todos os tipos de dados dentro do vetor cards 
# em tipo character, classe character. 
unclass(cards)
```

Comparar:  

```{r}
  # Factors
gender <- factor(c('feminino', 'masculino', 'feminino', 'feminino', 'feminino', 'feminino'))
typeof(gender)
class(gender)
attributes(gender)
# Como R armazena o factor
unclass(gender)

```
> Se você quiser colocar múltiplos tipos de dados em um vetor, R converterár os elementos a simples tipos de dados.  

Isso cria problemas, pois muitos conjuntos de dados utilizados para análises (_datasets_) contém múltiplos tipos de dados 

## Coercion  

Aqui entrará o conceito de coerção em R. Muitos dados diferentes serão convertidos a um só tipo de dado por coerção, no interpretador R. Esse comportamento de R parece ser inconveniente, porém não o é. Coisas úteis podem surgir a partir da coerção.  

Então, como R faz a coerção de tipos de dados?  
- Se uma _string_ de caractere está presente no vetor atômico, R converterá tudo o mais em um vetor para _strings_  de caracteres.  
- Se um vetor contém lógicos e números, R converterá os lógicos a números.  
- Todo `TRUE` será convertido a 1; todo `FALSE` tornará-se um 0.  

Resumindo, tudo será convertido a um caractere se caractere estiver presente. Lógicos serão convertidos a números, se aqueles forem colocados junto a números no vetor.  

Para transformar um tipo em outro, basta usar a velha função `as`:  

```{r}
as.character(1)
as.character(0)

as.logical(1)
as.logical(0)

as.numeric(TRUE)
as.numeric(FALSE)
```

Existe um tipo de objeto em R que aceita diferentes tipos de dados, sem a necessidade de construirmos vetores separados para cada tipo, ou colocar tudo em um mesmo vetor e este acaber sendo modificado por coerção?  


> Existe um tipo de objeto R que aceita diferentes tipos de dados e evita coerção, a lista.  


## Listas  

A primeira informação sobre listas é que ela **unidiemensional**, assim como os vetores atômicos.  
Então por que não usar vetores? Na verdade o comportamento de listas é diferente. Este é um tipo de objeto que não agrupa valores individuais, mas sim **objetos**. Então, uma lista pode conter vetores atomicos e até outras listas. 

Exemplo do livro, ista contendo três objetos:

1. vetor numérico com 31 elementos (primeiro elemento da lista);  
2. vetor caracteres contendo um único elemento (segundo elemento da lista);  
3. lista contendo dois elementos (terceiro elemento da lista);  

```{r}
list1 <- list(100:130, "R", list(TRUE, FALSE))
print(list1)
```

**Colchetes duplos** indicam que elemento da lista está sendo mostrado. E cada elemento terá seu sub-elemento dentro de sua demonstração de elemento. Eles estão abaixo do elmento. Por exemplo: [[3]] é o terceiro elemento da lista, e abaixo dele serão demonstrados os sub-elemtnos [1] e [2]. Note que cada sub-elemento que está sendo mostrado possui - acima dele - numeração entre colchetes duplos (no nosso caso, [[1]] para elemento 1 do primeiro sub-elmento de [[3]]).    

```{r}
lista <- list(c("Washington", "Candeia"), list(1:10), factor(c("H", "H", "F")))

typeof(lista); class(lista); attributes(lista); unclass(lista)
```

Uso de listas em R pode ser um complicador se não houver critérios para sua criação. Porém, elas são flexibilidade faz deste objeto uma ferramenta de armazenamento útil para armazenamento em R, pois é possível armazenar qualquer coisa com uma lista.  

## Data Frames

Cartas de um baralho (_deck of cards_). 

**Data.frame** é a versão bidimensional de uma lista. Proveem uma maneira excelente de fornecer uma forma de armazenar um baralho (cartas em um baralho). Na verdade, os data.frames em R são o que seriam as planilhas do Excel. 

Os dados são armazenados em colunas, e cada coluna pode conter um tipo diferente de dado (numérico, character, lógico). Porém, é preciso ficar atento na construção de um data.frame, pois todas as colunas devem ter o mesmo comprimento.   

> Cada coluna em um data.frame de R deve conter o mesmo comprimento.  

Para criar um data.frame há a função `data.frame`.  

```{r}
# Usando argumentos nomeados para criar dados em data.frame
# O nome do argumento será o nome da coluna. 
# O que está contido no argumento nomeado fará parte das colunas
df <- data.frame(face = c("ace", "two", "six"), 
                 suit = c("clubs" ,"clubs", "clubs" ), 
                 value = c(1, 2, 3))
```

É possível observar no **painel de ambiente, história, connection, e git** do Rstudio que o ojbeto `df` criado (um data.frame) possui três tipos de objetos agrupados: **face, suit** e **value**. 
Para observar no **console** pode-se utilizar a função `str`. 

```{r}
# Tipo de df:
typeof(df)
# "Usando função str para ver o conteúdo de df:
str(df)
print(df)
```


> Data.frames são objetos do tipo lista, mas pertencentes à classe "data.frame".  

Observe que todos os caracteres no data.frame (argumentos `face` e `suit`, respectivamente) foram, por coerção, passados ao tipo character.  

É possível evitar que ocorra coerção e os tipos sejam modificados em um data.frame R. Para isso, basta utilizar um argumento `stringsAsfactors` como `FALSE`. 

```{r}
# Exemplo de data frame sem coerção de tipos
df <- data.frame(face = c("ace", "two", "six"),
                 suit = c("clubs", "clubs", "clubs"),
                 value = c(1, 2, 3), 
                 stringsAsFactors = FALSE)

# Observando modificações
print(df)

# str
str(df)
```

Note que agora, os objetos face e suit estão como _chr_ de characters. Não são mais factors. 

## Carregando Dados

CSV - Arquivos de texto simples onde os dados estão separados por vírgulas. 

```{r}
head(deck)
```

## Salvando Dados

Salvar uma cópia do arquivo CSV. Usar a função `write.csv`.   

```{r}
# Salvar uma cópia
write.csv(deck, file = "cards.csv", row.names = FALSE)
```

Por que usar o argumento `row.names = FALSE`?  
**Para prevenir R de adicionar mais uma coluna no início do data.frame.**  
Essa coluna conteria números, para numerar as linhas conforme o seu número. Por isso row.names. Isso acarretaria problemas ao abrir este arquivo, pois nem mesmo o R poderia entender o que seria essa primeira coluna. Ele entenderia que essa coluna seria a primeira coluna do data.frame, o que acarretaria em problemas nas futuras análises.  
